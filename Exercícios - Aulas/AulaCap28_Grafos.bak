;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname AulaCap28_Grafos) (read-case-sensitive #t) (teachpacks ((lib "draw.rkt" "teachpack" "htdp") (lib "image.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "draw.rkt" "teachpack" "htdp") (lib "image.rkt" "teachpack" "2htdp")) #f)))
(define-struct nodo (nome vizinhos))
;; Um nodo é um par
;; (make-nodo n v), onde
;; n : String, representa o nome do nodo
;; v : ListaDeString, representa os nodos vizinhos

;; Um Grafo é
;; 1. empty, ou
;; 2. (cons n g), onde
;; n : Nodo
;; g : Grafo

(define GrafoABCD (list
                   (make-nodo "A" (list "B" "C"))
                   (make-nodo "B" (list "A" "C"))
                   (make-nodo "C" (list "B" "D"))
                   (make-nodo "D" (list "C"))
                   ))

(define GrafoG (list
                (make-nodo "Duluth" (list "Toronto"))
                (make-nodo "Toronto" (list "Duluth" "Chicago" "Pittsburgh"))
                (make-nodo "Chicago" (list "Toronto"))
                (make-nodo "Pittsburgh" (list "Toronto"))
                ))

;; ----------------->>>>> fazer aqui a constante mapa

;; vizinhos: String Grafo -> ListaDeString
;; Dados o nome de um nodo e um grafo, devolve os nomes de
;; todos os nodos vizinhos do nodo dado.
;; Obs.: O nodo dado deve fazer parte do grafo
;; Exemplos:
;; (vizinhos "Chicago" GrafoG) = (list "Toronto")
;; (vizinhos "A" GrafoABCD) = (list "B" "C")
(define (vizinhos nome grafo)
 (cond
   ;; Se o grafo grafo estiver vazio, retornar a lista vazia.
   [(empty? grafo) empty]
   ;; Se o nome do primeiro nodo do grafo for nome, devolve os vizinhos deste nodo
   [(string=? nome (nodo-nome (first grafo))) (nodo-vizinhos (first grafo))]
   ;; senão, procura os vizinhos do nome nos outros nodos do grafo.
   [else (vizinhos nome (rest grafo ))]))
;; Testes:
(check-expect (vizinhos "Chicago" GrafoG) (list "Toronto"))
(check-expect (vizinhos "Toronto" GrafoG) (list "Duluth" "Chicago" "Pittsburgh"))
(check-expect (vizinhos "A" GrafoABCD) (list "B" "C"))

(define LISTAABC (list "A" "B" "C"))
(define LISTABCD (list "B" "C" "D"))

;; está-na-lista?: String ListaDeString -> Booleano
;; dados um nome (string) e uma lista de strings,
;; diz se o nome dado está na lista.
;; Exemplos:
;; (está-na-lista? "A" (list "A" "B" "C")) = true
;; (está-na-lista? "Chicago" (list "Toronto" "Chicago" "Denver")) = true
(define (está-na-lista? nome lista)
  (cond
    ;; se a lista for vazia, retorna falso
    [(empty? lista) false]
    ;; se o primeiro elemento da lista for o nome buscado, retorna true
    [(string=? nome (first lista)) true]
    ;; senão testa o resto da lista
    [else (está-na-lista? nome (rest lista))]))
;; Testes:
(check-expect (está-na-lista? "A" LISTAABC) true)
(check-expect (está-na-lista? "A" LISTABCD) false)
(check-expect (está-na-lista? "Chicago" (list "Toronto" "Chicago" "Denver")) true)

;; subtrai-lista: ListaDeString ListaDeString -> ListaDeString
;; dadas duas lista de strings, devolve todos os
;; elementos da primeira lista que não estão na segunda (ou seja,
;; subtrai a segunda lista da primeira).
;; Exemplos:
;; (subtrai-lista LISTAABC LISTABCD) = (list "A")
;; (subtrai-lista LISTABCD LISTAABC) = (list "D")
(define (subtrai-lista lista1 lista2)
  (cond
    ;; se a lista 1 estiver vazia, devolve uma lista vazia
    [(empty? lista1) empty]
    ;; se a lista 2 estiver vazia, devolve a lista 1
    [(empty? lista2) lista1]
    ;; se o primeiro elemento da lista 1 está na lista 2, não coloca ele na lista 
    ;; retornada para a função e so calcula para o resto da lista
    [(está-na-lista? (first lista1) lista2) (subtrai-lista (rest lista1) lista2)]
    ;; senao, coloca o primeiro elemento da lista 1 na lista ja subtraida da lista 2
    [else (cons (first lista1) (subtrai-lista (rest lista1) lista2))]))
;; Testes:
(check-expect (subtrai-lista LISTAABC LISTABCD) (list "A"))
(check-expect (subtrai-lista LISTABCD LISTAABC) (list "D"))
(check-expect (subtrai-lista (list "oi") (list "Oi")) (list "oi"))

;; Um elemento do tipo ListaDeStringOuFalse é
;; 1. Uma ListaDeString, ou
;; 2. #false

;; encontra-caminho: String String Grafo ListaDeString -> ListaDeStringOUFalse
;; Dados os nome das cidades origem e destino, um grafo (mapa) e uma lista de cidades já visitadas,
;; encontra um caminho entre a origem e o destino. Se não existir caminho, devolve false.
;; Obs.: As cidades dadas devem fazer parte do grafo.
(define (encontra-caminhos origem destino grafo visitadas)
  (cond
    ;; Se a origem for igual ao destino, retornar a lista com o destino.
    [(string=? origem destino) (list destino)]
    ;; senão
    [else
    ;; definir um nome local (visitadas-novo) que guarda os vsitados, incluindo a origem
     ;; (que agora é um nodo já visitado) e outro nome que guarda um caminho entre um dos
     ;; vizinhos não visitados do nodo origem e o destino, se existir caminho::
     (local
       ((define visitadas-novo (cons origem visitadas))
        (define caminho
          (encontra-caminho-vizinhos (vizinhos origem grafo) destino grafo visitadas-novo)
            ))
       (cond  ;; e testar este nome local (caminho)
         ;; se o nome for um booleano (não há caminho), devolver false
         [(boolean? caminho) false]
         ;; se o caminho for uma lista (foi encontrado um caminho), devolver este
         ;; caminho, colocando o nodo origem na frente
         [else (cons origem caminho)]))]))
;; Testes:


;; encontra-caminho-vizinhos: ListaDeString String Grafo  ->  ListaDeStringOuFalse
;; Dados os vizinhos de uma cidade, uma cidade de destino e um grafo (mapa),
;; encontra um caminho entre a
;; origem e o destino. Se não existir caminho, devolve false.
;; Obs.: As cidades dadas devem fazer parte do grafo.
(define (encontra-caminho-vizinhos vizinhos destino grafo visitadas)
  (cond
    [(empty? vizinhos) false]
    [else (local ((define visitadas-novo (cons (first vizinhos) visitadas))
                  (define caminho (encontra-caminhos (first vizinhos) destino grafo visitadas)))
	    (cond
	      [(boolean? caminho) (encontra-caminho-vizinhos (rest vizinhos) destino grafo visitadas-novo)]
	      [else caminho]))]))
;; Testes:
(encontra-caminhos "A" "D" GrafoABCD)





 


